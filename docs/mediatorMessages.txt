/***

This text describes the messages that the mediator is supposed to interpret.
It isn't needed to let the program work but it is recommended to document all messages here.

There are order commands and event commands, 
order comments starts with a present verb, it is send to let the event occur
event comments ends with a past verb, they should ALWAYS be sent when the event is over

***/

/****** Internal messages ********/
/**
 * EventKey: ActiveVersionChanged
 * Sent when a project has its active version number changed
 *
 * @param {int} oldVersionNumber - Project's last version
 * @param {Sketch} sketchProject - Project's object with the version changed
 */
onActiveVersionChanged = function( oldVersionNumber, sketchProject ){}


/**
 * EventKey: ChangeActiveVersion
 * Order to change a project's active version number
 *
 * @param {int} versionNumber - Project's new active version
 */
onChangeActiveVersion = function( versionNumber ){}


/**
 * EventKey: FormatInterfaceResource
 * Order to format interface resource's text
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource.
 * @param {int} fontSize - The size of the font.
 * @param {String} fontFamily - The family of the font (arial, calibri, etc).
 * @param {int} xPadding - The horizontal padding from the text (from 0 to 100).
 * @param {int} yPadding - The vertical padding from the text (from 0 to 100).
 */
onFormatInterfaceResource = function( interfaceResource, fontSize, fontFamily, xPadding, yPadding ){}

//TODO: Add extraFormat with color and bold, italic, etc

 /**
 * EventKey: ResourceFormatted
 * Sent when an interface resource have its text formatted
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource.
 */
onResourceFormatted = function( interfaceResource ){}


/**
 * EventKey: InterfaceResourceCreated
 * Sent when a interface resource is created
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource.
 */
onInterfaceResourceCreated = function( interfaceResource ){}

/**
 * EventKey: InterfaceResourceMoved
 * Sent when a interface resource is moved
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource.
 * @param {int} oldX - The last X position from the resource.
 * @param {int} oldY - The last Y position from the resource.
 */
onInterfaceResourceMoved = function( interfaceResource, oldX, oldY ){}

/**
 * EventKey: MoveInterfaceResource
 * Order to move an interface resource
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource.
 * @param {int} toX - The new X position from the resource.
 * @param {int} toY - The new Y position from the resource.
 */
onMoveInterfaceResource = function( interfaceResource, toX, toY ){}
 
 
 /**
 * EventKey: ChangeActiveVersion
 * Order to change project's active version, the version that is in edition on the graphic canvas
 *
 * @param {int} toVersion - The new active version from the project
 */
onChangeActiveVersion = function( toVersion ){}

/**
 * EventKey: CloneResourceVersion
 * Order to clone a resource version
 *
 * @param {int} baseVersion - A number indicating the base version from the clone.
 * @param {int} targetVersion - The clone object from the new version.
 */
onCloneResourceVersion = function( interfaceResource, baseVersion, targetVersion ){}
 
 /**
 * EventKey: CreateButton //TODO: Use the CreateResource instead of this one
 * Order to create a button resource
 *
 */

 /**
 * EventKey: CreateResource
 * Order to create an interface resource
 *
 * @param {String} resourceTypeStr - A string that defines what kind of element you want to create.
 * - "button" = button (not implemented yet)
 * - "image" = image resource
 *
 */
onCreateResource = function( resourceTypeStr ){}

 /**
 * EventKey: ResourceHistoryDeleted
 * Sent when an entire resource history is deleted
 *
 * @param {InterfaceResource} interfaceResourceHistory - The object that contains the data from an interface resource history.
 */
onResourceHistoryDeleted = function( interfaceResourceHistory ){}

 /**
 * EventKey: DeleteResourceVersion
 * Order to turn on the deleted tag from one resource version
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource.
 */
onDeleteResourceVersion = function( interfaceResource ){}

 /**
 * EventKey: RenameElement
 * Order to rename an element
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource.
 * @param {String} newNameStr - The new name's String
 */

/**
 * EventKey: Redo
 * Order to undo an action
 *
 */
 
 /**
 * EventKey: Undo
 * Order to undo an action
 *
 */

/**
 * EventKey: ProjectCreated
 * Sent when a project is created 
 *
 * @param {String} projectName - New project's name
 * @param {String} authorName - New project's author
 * @param {Sketch} sketchProject - New project's object
 */
 
 /**
 * EventKey: ProjectClosed
 * Sent when a project is closed 
 *
 */
 
 /**
 * EventKey: DownloadProject
 * Order to download the current project, it saves on the current disk from the user.
 *
 */

 /**
 * EventKey: UploadProject
 * Order to upload some project to the memory, it loads it from the current disk of the user.
 *
 */
onUploadProject = function(){}

 /**
 * EventKey: ProjectUploaded
 * Sent when a project is uploaded by the user.
 *
 * @param {String} JSONString - A string that represents the uploaded project's JSON object
 */
onProjectUploaded = function( JSONString ){}

 /**
 * EventKey: RemoveResourceHistory
 * Order to remove one resource's entire history
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource that will be removed.
 */
onRemoveResourceHistory = function( interfaceResource ){}

 /**
 * EventKey: RemoveResourceVersion
 * Order to remove one resource version
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource that will be removed.
 */
onRemoveResourceVersion = function( interfaceResource ){}

 /**
 * EventKey: ChangeResHistExtraImg
 * Order to change Resource History's image extra field
 *
 * @param {InterfaceResource} interfaceResource - The object from the current version of the project.
 */
onChangeResHistExtraImg = function( interfaceResource ){}


 /**
 * EventKey: ResHistExtraImgChanged
 * Sent when one Resource History has its image extra field changed
 *
 * @param {InterfaceResource} interfaceResource - The object from the current version of the project.
 * @param {ResourceHistory} resourceHistory - The history object with the new image source.
 */
onResHistExtraImgChanged = function( interfaceResource, resourceHistory ){}

 /**
 * EventKey: ImageUploadedForResource
 * Sent when the image data handler read an image from the user
 *
 * @param {InterfaceResource} interfaceResource - The object from the current version of the project.
 * @param {String} imageSource - A string that represents an image, generally it is pretty long.
 */
onImageUploadedForResource = function( interfaceResource, imageSource ){}


/**
 * EventKey: ResourceDeleteTagChanged
 * Sent when some resource have its delete tag changed, this tag can be true or false.
 *
 * @param {InterfaceResource} interfaceResource - The interface resource from the version where the deleted tag has been changed
 */
onResourceDeleteTagChanged = function( interfaceResource ){}

/**
 * EventKey: ResourceVersionAdded
 * Sent when some resource have a version added
 *
 * @param {InterfaceResource} resourceTimeSlotObj - The added element in the resouce's history object.
 * @param {ResourceHistory} resourceHistory - The resource's history without the removed element
 * @param {int} sketchActiveVersion - A number indicating project's active version when this operation has been done
 */
onResourceVersionAdded = function( resourceTimeSlotObj, resourceHistory, sketchActiveVersion ){}

/**
 * EventKey: ResourceVersionRemoved
 * Sent when some resource have a version removed
 *
 * @param {InterfaceResource} removedResource - The removed element from the resouce's history object.
 * @param {ResourceHistory} resourceHistory - The resource's history without the removed element
 * @param {int} sketchActiveVersion - A number indicating project's active version when this operation has been done
 */
onResourceVersionRemoved = function( removedResource, resourceHistory, sketchActiveVersion ){}


 /**
 * EventKey: ResourceSelected
 * Sent when a group of resources are selected on the canvas.
 *
 * @param {Array} resourceArray - An array with the selected elements
 */
onResourceSelected = function( resourceArray ){}

/**
 * EventKey: ResourceVersionCloned
 * Sent when some resource have a version cloned
 *
 * @param {InterfaceResource} clonedObj - The clone object from the new version.
 * @param {int} baseVersion - A number indicating the base version from the clone.
 * @param {ResourceHistory} resourceHistory - The resource's history with the new clone
 * @param {int} sketchActiveVersion - A number indicating project's active version when this clone was made
 */
onResourceVersionCloned = function( clonedObj, baseVersion, resourceHistory, sketchActiveVersion ){}

 /**
 * EventKey: ResourceSelectCanceled
 * Sent when a group of selected resources are unselected.
 *
 * @param {Array} resourceArray - An array with the unselected elements
 */
onResourceSelectCanceled = function( resourceArray ){}

/**
 * EventKey: ResizeInterfaceResource
 * Order to resize an element
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource.
 * @param {int} toX - The new X position from the resource.
 * @param {int} toY - The new Y position from the resource.
 * @param {int} newWidth - New resource width.
 * @param {int} newHeight - New resource height.
 */
onResizeInterfaceResource = function( interfaceResource, toX, toY, newWidth, newHeight ){}

/**
 * EventKey: InterfaceResourceResized
 * Sent when a interface resource is resized
 *
 * @param {InterfaceResource} interfaceResource - The object that contains the data from an interface resource.
 * @param {int} oldX - The new X position from the resource.
 * @param {int} oldY - The new Y position from the resource.
 * @param {int} oldWidth - New resource width.
 * @param {int} oldHeight - New resource height.
 */
onInterfaceResourceResized = function( interfaceResource, oldX, oldY, oldWidth, oldHeight ){}


/****** Graphic messages ********/


/**
 * EventKey: EditorDragEnd
 * Sent when a interface resource on the canvas drag is finished 
 *
 * @param {?} evt - The event that has been published
 * @param {InterfaceResource} interfaceResource - The data object from the shape which has been dragged
 * @param {Kinetic.Node} kineticShape - The kinetic node on the canvas that has been dragged
 */
 
 /**
 * EventKey: ResourceClicked
 * Sent when a interface resource on the canvas is clicked
 *
 * @param {?} evt - The event that has been published
 * @param {InterfaceResource} interfaceResource - The data object from the shape which has been clicked
 */
 
 /**
 * EventKey: ResourceNameChanged
 * Sent when a interface resource name's changed
 *
 * @param {InterfaceResource} interfaceResource - The data object from the shape which has been clicked
 * @param {String} newNameStr - The new name's String
 */